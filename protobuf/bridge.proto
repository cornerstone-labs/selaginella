syntax = "proto3";

option go_package = "./protobuf/pb";
package selaginella.proto_rpc;

service BridgeService {
  rpc crossChainTransfer(CrossChainTransferRequest) returns (CrossChainTransferResponse);
  rpc changeTransferStatus(CrossChainTransferStatusRequest) returns (CrossChainTransferStatusResponse);
  rpc UpdateDepositFundingPoolBalance(UpdateDepositFundingPoolBalanceRequest) returns (UpdateDepositFundingPoolBalanceResponse);
  rpc UpdateWithdrawFundingPoolBalance(UpdateWithdrawFundingPoolBalanceRequest) returns (UpdateWithdrawFundingPoolBalanceResponse);
  rpc UnstakeBatch(UnstakeBatchRequest) returns (UnstakeBatchResponse);
  rpc UnstakeSingle(UnstakeSingleRequest) returns (UnstakeSingleResponse);
  rpc TransferToL2DappLinkBridge(TransferToL2DappLinkBridgeRequest) returns (TransferToL2DappLinkBridgeResponse);
  rpc BatchMint(BatchMintRequest) returns (BatchMintResponse);
}

message CrossChainTransferRequest {
  string source_chain_id = 1;
  string dest_chain_id = 2;
  string receive_address = 3;
  string amount = 4;
  string token_address = 5;
  string fee = 6;
  string nonce = 7;
  string source_hash = 8;
}

message CrossChainTransferResponse {
  bool success = 1;
  string message = 2;
}

message CrossChainTransferStatusRequest {
  string source_chain_id = 1;
  string dest_chain_id = 2;
  string tx_hash = 3;
}

message CrossChainTransferStatusResponse {
  bool success = 1;
  string message = 2;
}

message UpdateDepositFundingPoolBalanceRequest {
  string source_chain_id = 1;
  string dest_chain_id = 2;
  string receive_address = 3;
  string amount = 4;
  string token_address = 5;
  string source_hash = 6;
}

message UpdateDepositFundingPoolBalanceResponse {
  bool success = 1;
  string message = 2;
}

message UpdateWithdrawFundingPoolBalanceRequest {
  string source_chain_id = 1;
  string dest_chain_id = 2;
  string receive_address = 3;
  string amount = 4;
  string token_address = 5;
  string source_hash = 6;
}

message UpdateWithdrawFundingPoolBalanceResponse {
  bool success = 1;
  string message = 2;
}

message UnstakeBatchRequest {
  repeated string Strategy_address = 1;
  string source_chain_id = 2;
  string dest_chain_id = 3;
  string gas_limit = 4;
  string source_hash = 5;
}

message UnstakeBatchResponse {
  bool success = 1;
  string message = 2;
}

message UnstakeSingleRequest {
  string staker_address = 1;
  string strategy_address = 2;
  string shares_amount = 3;
  string chain_id = 4;
  string source_hash = 5;
}

message UnstakeSingleResponse {
  bool success = 1;
  string message = 2;
}

message TransferToL2DappLinkBridgeRequest {
  uint64 batch = 1;
  string chain_id = 2;
  string strategy_address = 3;
}

message TransferToL2DappLinkBridgeResponse {
  bool success = 1;
  string message = 2;
}

message BatchMintRequest {
  uint64 batch = 1;
  map<string, string> Mint = 2;
}

message BatchMintResponse {
  bool success = 1;
  string message = 2;
}