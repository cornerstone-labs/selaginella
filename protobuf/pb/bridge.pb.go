// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: protobuf/bridge.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrossChainTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainId  string `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId    string `protobuf:"bytes,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	ReceiveAddress string `protobuf:"bytes,3,opt,name=receive_address,json=receiveAddress,proto3" json:"receive_address,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenAddress   string `protobuf:"bytes,5,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	Fee            string `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	Nonce          string `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SourceHash     string `protobuf:"bytes,8,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
}

func (x *CrossChainTransferRequest) Reset() {
	*x = CrossChainTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainTransferRequest) ProtoMessage() {}

func (x *CrossChainTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainTransferRequest.ProtoReflect.Descriptor instead.
func (*CrossChainTransferRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *CrossChainTransferRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *CrossChainTransferRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *CrossChainTransferRequest) GetReceiveAddress() string {
	if x != nil {
		return x.ReceiveAddress
	}
	return ""
}

func (x *CrossChainTransferRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CrossChainTransferRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *CrossChainTransferRequest) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *CrossChainTransferRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CrossChainTransferRequest) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

type CrossChainTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CrossChainTransferResponse) Reset() {
	*x = CrossChainTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainTransferResponse) ProtoMessage() {}

func (x *CrossChainTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainTransferResponse.ProtoReflect.Descriptor instead.
func (*CrossChainTransferResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *CrossChainTransferResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CrossChainTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CrossChainTransferStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainId string `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId   string `protobuf:"bytes,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	TxHash        string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *CrossChainTransferStatusRequest) Reset() {
	*x = CrossChainTransferStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainTransferStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainTransferStatusRequest) ProtoMessage() {}

func (x *CrossChainTransferStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainTransferStatusRequest.ProtoReflect.Descriptor instead.
func (*CrossChainTransferStatusRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *CrossChainTransferStatusRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *CrossChainTransferStatusRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *CrossChainTransferStatusRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type CrossChainTransferStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CrossChainTransferStatusResponse) Reset() {
	*x = CrossChainTransferStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainTransferStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainTransferStatusResponse) ProtoMessage() {}

func (x *CrossChainTransferStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossChainTransferStatusResponse.ProtoReflect.Descriptor instead.
func (*CrossChainTransferStatusResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *CrossChainTransferStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CrossChainTransferStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateDepositFundingPoolBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainId  string `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId    string `protobuf:"bytes,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	ReceiveAddress string `protobuf:"bytes,3,opt,name=receive_address,json=receiveAddress,proto3" json:"receive_address,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenAddress   string `protobuf:"bytes,5,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	SourceHash     string `protobuf:"bytes,6,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
}

func (x *UpdateDepositFundingPoolBalanceRequest) Reset() {
	*x = UpdateDepositFundingPoolBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDepositFundingPoolBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDepositFundingPoolBalanceRequest) ProtoMessage() {}

func (x *UpdateDepositFundingPoolBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDepositFundingPoolBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDepositFundingPoolBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetReceiveAddress() string {
	if x != nil {
		return x.ReceiveAddress
	}
	return ""
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *UpdateDepositFundingPoolBalanceRequest) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

type UpdateDepositFundingPoolBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateDepositFundingPoolBalanceResponse) Reset() {
	*x = UpdateDepositFundingPoolBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDepositFundingPoolBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDepositFundingPoolBalanceResponse) ProtoMessage() {}

func (x *UpdateDepositFundingPoolBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDepositFundingPoolBalanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDepositFundingPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDepositFundingPoolBalanceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateDepositFundingPoolBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateWithdrawFundingPoolBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainId  string `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId    string `protobuf:"bytes,2,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	ReceiveAddress string `protobuf:"bytes,3,opt,name=receive_address,json=receiveAddress,proto3" json:"receive_address,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TokenAddress   string `protobuf:"bytes,5,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	SourceHash     string `protobuf:"bytes,6,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) Reset() {
	*x = UpdateWithdrawFundingPoolBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawFundingPoolBalanceRequest) ProtoMessage() {}

func (x *UpdateWithdrawFundingPoolBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawFundingPoolBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawFundingPoolBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetReceiveAddress() string {
	if x != nil {
		return x.ReceiveAddress
	}
	return ""
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *UpdateWithdrawFundingPoolBalanceRequest) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

type UpdateWithdrawFundingPoolBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateWithdrawFundingPoolBalanceResponse) Reset() {
	*x = UpdateWithdrawFundingPoolBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWithdrawFundingPoolBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawFundingPoolBalanceResponse) ProtoMessage() {}

func (x *UpdateWithdrawFundingPoolBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawFundingPoolBalanceResponse.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawFundingPoolBalanceResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWithdrawFundingPoolBalanceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateWithdrawFundingPoolBalanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UnstakeBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy      map[string]uint64 `protobuf:"bytes,1,rep,name=strategy,proto3" json:"strategy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SourceChainId string            `protobuf:"bytes,2,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	DestChainId   string            `protobuf:"bytes,3,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	GasLimit      string            `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	SourceHash    string            `protobuf:"bytes,5,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
}

func (x *UnstakeBatchRequest) Reset() {
	*x = UnstakeBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeBatchRequest) ProtoMessage() {}

func (x *UnstakeBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeBatchRequest.ProtoReflect.Descriptor instead.
func (*UnstakeBatchRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *UnstakeBatchRequest) GetStrategy() map[string]uint64 {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (x *UnstakeBatchRequest) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *UnstakeBatchRequest) GetDestChainId() string {
	if x != nil {
		return x.DestChainId
	}
	return ""
}

func (x *UnstakeBatchRequest) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *UnstakeBatchRequest) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

type UnstakeBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnstakeBatchResponse) Reset() {
	*x = UnstakeBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeBatchResponse) ProtoMessage() {}

func (x *UnstakeBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeBatchResponse.ProtoReflect.Descriptor instead.
func (*UnstakeBatchResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *UnstakeBatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnstakeBatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UnstakeSingleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakerAddress   string `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	StrategyAddress string `protobuf:"bytes,2,opt,name=strategy_address,json=strategyAddress,proto3" json:"strategy_address,omitempty"`
	SharesAmount    string `protobuf:"bytes,3,opt,name=shares_amount,json=sharesAmount,proto3" json:"shares_amount,omitempty"`
	ChainId         string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SourceHash      string `protobuf:"bytes,5,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
}

func (x *UnstakeSingleRequest) Reset() {
	*x = UnstakeSingleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeSingleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeSingleRequest) ProtoMessage() {}

func (x *UnstakeSingleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeSingleRequest.ProtoReflect.Descriptor instead.
func (*UnstakeSingleRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *UnstakeSingleRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *UnstakeSingleRequest) GetStrategyAddress() string {
	if x != nil {
		return x.StrategyAddress
	}
	return ""
}

func (x *UnstakeSingleRequest) GetSharesAmount() string {
	if x != nil {
		return x.SharesAmount
	}
	return ""
}

func (x *UnstakeSingleRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *UnstakeSingleRequest) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

type UnstakeSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UnstakeSingleResponse) Reset() {
	*x = UnstakeSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeSingleResponse) ProtoMessage() {}

func (x *UnstakeSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeSingleResponse.ProtoReflect.Descriptor instead.
func (*UnstakeSingleResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *UnstakeSingleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnstakeSingleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransferToL2DappLinkBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch           uint64 `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	ChainId         string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	StrategyAddress string `protobuf:"bytes,3,opt,name=strategy_address,json=strategyAddress,proto3" json:"strategy_address,omitempty"`
}

func (x *TransferToL2DappLinkBridgeRequest) Reset() {
	*x = TransferToL2DappLinkBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToL2DappLinkBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToL2DappLinkBridgeRequest) ProtoMessage() {}

func (x *TransferToL2DappLinkBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToL2DappLinkBridgeRequest.ProtoReflect.Descriptor instead.
func (*TransferToL2DappLinkBridgeRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{12}
}

func (x *TransferToL2DappLinkBridgeRequest) GetBatch() uint64 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *TransferToL2DappLinkBridgeRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransferToL2DappLinkBridgeRequest) GetStrategyAddress() string {
	if x != nil {
		return x.StrategyAddress
	}
	return ""
}

type TransferToL2DappLinkBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransferToL2DappLinkBridgeResponse) Reset() {
	*x = TransferToL2DappLinkBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToL2DappLinkBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToL2DappLinkBridgeResponse) ProtoMessage() {}

func (x *TransferToL2DappLinkBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToL2DappLinkBridgeResponse.ProtoReflect.Descriptor instead.
func (*TransferToL2DappLinkBridgeResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{13}
}

func (x *TransferToL2DappLinkBridgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TransferToL2DappLinkBridgeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchMintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch uint64            `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	Mint  map[string]string `protobuf:"bytes,2,rep,name=Mint,proto3" json:"Mint,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchMintRequest) Reset() {
	*x = BatchMintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMintRequest) ProtoMessage() {}

func (x *BatchMintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMintRequest.ProtoReflect.Descriptor instead.
func (*BatchMintRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{14}
}

func (x *BatchMintRequest) GetBatch() uint64 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *BatchMintRequest) GetMint() map[string]string {
	if x != nil {
		return x.Mint
	}
	return nil
}

type BatchMintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchMintResponse) Reset() {
	*x = BatchMintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_bridge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMintResponse) ProtoMessage() {}

func (x *BatchMintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_bridge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMintResponse.ProtoReflect.Descriptor instead.
func (*BatchMintResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_bridge_proto_rawDescGZIP(), []int{15}
}

func (x *BatchMintResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchMintResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_protobuf_bridge_proto protoreflect.FileDescriptor

var file_protobuf_bridge_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e,
	0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x96,
	0x02, 0x0a, 0x19, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x50, 0x0a, 0x1a, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x56, 0x0a, 0x20, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x26, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5d, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5e, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x3b,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x14, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x4b, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x7f, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x32,
	0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x58, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4c,
	0x32, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x10,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c,
	0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x69, 0x6e, 0x74, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0xa6, 0x08, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x79, 0x0a, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x65, 0x6c, 0x61,
	0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a,
	0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65,
	0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x2e, 0x73, 0x65, 0x6c,
	0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x65, 0x6c, 0x61,
	0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e,
	0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x0c, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2a, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x65,
	0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x6c, 0x61,
	0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e,
	0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x4c, 0x32, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x38, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4c, 0x32, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x4c, 0x32, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65,
	0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x65, 0x6c, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protobuf_bridge_proto_rawDescOnce sync.Once
	file_protobuf_bridge_proto_rawDescData = file_protobuf_bridge_proto_rawDesc
)

func file_protobuf_bridge_proto_rawDescGZIP() []byte {
	file_protobuf_bridge_proto_rawDescOnce.Do(func() {
		file_protobuf_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_bridge_proto_rawDescData)
	})
	return file_protobuf_bridge_proto_rawDescData
}

var file_protobuf_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_protobuf_bridge_proto_goTypes = []interface{}{
	(*CrossChainTransferRequest)(nil),                // 0: selaginella.proto_rpc.CrossChainTransferRequest
	(*CrossChainTransferResponse)(nil),               // 1: selaginella.proto_rpc.CrossChainTransferResponse
	(*CrossChainTransferStatusRequest)(nil),          // 2: selaginella.proto_rpc.CrossChainTransferStatusRequest
	(*CrossChainTransferStatusResponse)(nil),         // 3: selaginella.proto_rpc.CrossChainTransferStatusResponse
	(*UpdateDepositFundingPoolBalanceRequest)(nil),   // 4: selaginella.proto_rpc.UpdateDepositFundingPoolBalanceRequest
	(*UpdateDepositFundingPoolBalanceResponse)(nil),  // 5: selaginella.proto_rpc.UpdateDepositFundingPoolBalanceResponse
	(*UpdateWithdrawFundingPoolBalanceRequest)(nil),  // 6: selaginella.proto_rpc.UpdateWithdrawFundingPoolBalanceRequest
	(*UpdateWithdrawFundingPoolBalanceResponse)(nil), // 7: selaginella.proto_rpc.UpdateWithdrawFundingPoolBalanceResponse
	(*UnstakeBatchRequest)(nil),                      // 8: selaginella.proto_rpc.UnstakeBatchRequest
	(*UnstakeBatchResponse)(nil),                     // 9: selaginella.proto_rpc.UnstakeBatchResponse
	(*UnstakeSingleRequest)(nil),                     // 10: selaginella.proto_rpc.UnstakeSingleRequest
	(*UnstakeSingleResponse)(nil),                    // 11: selaginella.proto_rpc.UnstakeSingleResponse
	(*TransferToL2DappLinkBridgeRequest)(nil),        // 12: selaginella.proto_rpc.TransferToL2DappLinkBridgeRequest
	(*TransferToL2DappLinkBridgeResponse)(nil),       // 13: selaginella.proto_rpc.TransferToL2DappLinkBridgeResponse
	(*BatchMintRequest)(nil),                         // 14: selaginella.proto_rpc.BatchMintRequest
	(*BatchMintResponse)(nil),                        // 15: selaginella.proto_rpc.BatchMintResponse
	nil,                                              // 16: selaginella.proto_rpc.UnstakeBatchRequest.StrategyEntry
	nil,                                              // 17: selaginella.proto_rpc.BatchMintRequest.MintEntry
}
var file_protobuf_bridge_proto_depIdxs = []int32{
	16, // 0: selaginella.proto_rpc.UnstakeBatchRequest.strategy:type_name -> selaginella.proto_rpc.UnstakeBatchRequest.StrategyEntry
	17, // 1: selaginella.proto_rpc.BatchMintRequest.Mint:type_name -> selaginella.proto_rpc.BatchMintRequest.MintEntry
	0,  // 2: selaginella.proto_rpc.BridgeService.crossChainTransfer:input_type -> selaginella.proto_rpc.CrossChainTransferRequest
	2,  // 3: selaginella.proto_rpc.BridgeService.changeTransferStatus:input_type -> selaginella.proto_rpc.CrossChainTransferStatusRequest
	4,  // 4: selaginella.proto_rpc.BridgeService.UpdateDepositFundingPoolBalance:input_type -> selaginella.proto_rpc.UpdateDepositFundingPoolBalanceRequest
	6,  // 5: selaginella.proto_rpc.BridgeService.UpdateWithdrawFundingPoolBalance:input_type -> selaginella.proto_rpc.UpdateWithdrawFundingPoolBalanceRequest
	8,  // 6: selaginella.proto_rpc.BridgeService.UnstakeBatch:input_type -> selaginella.proto_rpc.UnstakeBatchRequest
	10, // 7: selaginella.proto_rpc.BridgeService.UnstakeSingle:input_type -> selaginella.proto_rpc.UnstakeSingleRequest
	12, // 8: selaginella.proto_rpc.BridgeService.TransferToL2DappLinkBridge:input_type -> selaginella.proto_rpc.TransferToL2DappLinkBridgeRequest
	14, // 9: selaginella.proto_rpc.BridgeService.BatchMint:input_type -> selaginella.proto_rpc.BatchMintRequest
	1,  // 10: selaginella.proto_rpc.BridgeService.crossChainTransfer:output_type -> selaginella.proto_rpc.CrossChainTransferResponse
	3,  // 11: selaginella.proto_rpc.BridgeService.changeTransferStatus:output_type -> selaginella.proto_rpc.CrossChainTransferStatusResponse
	5,  // 12: selaginella.proto_rpc.BridgeService.UpdateDepositFundingPoolBalance:output_type -> selaginella.proto_rpc.UpdateDepositFundingPoolBalanceResponse
	7,  // 13: selaginella.proto_rpc.BridgeService.UpdateWithdrawFundingPoolBalance:output_type -> selaginella.proto_rpc.UpdateWithdrawFundingPoolBalanceResponse
	9,  // 14: selaginella.proto_rpc.BridgeService.UnstakeBatch:output_type -> selaginella.proto_rpc.UnstakeBatchResponse
	11, // 15: selaginella.proto_rpc.BridgeService.UnstakeSingle:output_type -> selaginella.proto_rpc.UnstakeSingleResponse
	13, // 16: selaginella.proto_rpc.BridgeService.TransferToL2DappLinkBridge:output_type -> selaginella.proto_rpc.TransferToL2DappLinkBridgeResponse
	15, // 17: selaginella.proto_rpc.BridgeService.BatchMint:output_type -> selaginella.proto_rpc.BatchMintResponse
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_protobuf_bridge_proto_init() }
func file_protobuf_bridge_proto_init() {
	if File_protobuf_bridge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainTransferStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainTransferStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDepositFundingPoolBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDepositFundingPoolBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWithdrawFundingPoolBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWithdrawFundingPoolBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeSingleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToL2DappLinkBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToL2DappLinkBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_bridge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_bridge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_bridge_proto_goTypes,
		DependencyIndexes: file_protobuf_bridge_proto_depIdxs,
		MessageInfos:      file_protobuf_bridge_proto_msgTypes,
	}.Build()
	File_protobuf_bridge_proto = out.File
	file_protobuf_bridge_proto_rawDesc = nil
	file_protobuf_bridge_proto_goTypes = nil
	file_protobuf_bridge_proto_depIdxs = nil
}
